#[cfg(not(doctest))]
pub mod header;
pub mod params;

pub use super::super::v1::definitions::GenericPayloadHeader;
pub use super::super::v1::definitions::Header;
use params::{
    EncryptionAlgorithm, ExchangeType, IntegrityAlgorithm, KeyExchangeMethod, PayloadType,
    PseudorandomFunction, SecurityProtocol, SequenceNumberType, TransformType,
};

/// When parsing a parameter from u8, there are several "regions" in the definitions
/// that can't be defined by Rusts enum. Typically, the last two regions of the
/// parameter definitions are unassigned and/or reserved for private use.
#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
#[repr(u8)]
pub enum UnparseableParameter {
    /// The parameter is reserved and must not be used, as it may conflict with older standards
    Reserved,
    /// The parameter has no recognized meaning by any known standard
    Unassigned,
    /// The parameter is reserved for Private Use by proprietary implementations
    /// and not part of a standard
    PrivateUse,
    /// The parameter can not reach the value this resolves to,
    /// as such the packet where it originates from must be invalid
    OutOfRange,
}

/// High-level representation of an IKEv2 message (ISAKMP packet)
pub struct IKEv2 {
    /// Cookie of the entity initiating the establishment of the Security Association.
    /// The value is chosen by the initiator, and it MUST NOT be zero.
    pub initiator_cookie: u64,
    /// Cookie of entity that is responding to a previous request of some sort.
    /// The value is chosen by the responder to identify a unique IKE Security Association.
    /// This value MUST be zero in the first message of an IKE initial exchange
    /// (including repeats of that message including a cookie).
    pub responder_cookie: u64,
    /// Type of packet defining the general state of the ongoing IKE "conversation",
    /// see [ExchangeType] for possible options. This constrains the payloads sent
    /// in each message in an exchange.
    pub exchange_type: ExchangeType,
    /// Flag indicating whether the packet is sent by the initiator, as
    /// this bit MUST be set in messages sent by the
    /// original initiator of the IKE SA and MUST be cleared in
    /// messages sent by the original responder. It is used by the
    /// recipient to determine which eight octets of the SPI were
    /// generated by the recipient. This bit changes to reflect who
    /// initiated the last rekey of the IKE SA.
    pub initiator: bool,
    /// This bit indicates that this message is a
    /// response to a message containing the same Message ID. This bit
    /// MUST be cleared in all request messages and MUST be set in all
    /// responses. An IKE endpoint MUST NOT generate a response to a
    /// message that is marked as being a response.
    pub response: bool,
    /// Message identifier used to control retransmission of lost packets and matching
    /// of requests and responses. It is essential to the security of the protocol
    /// because it is used to prevent message replay attacks.
    pub message_id: u32,
    /// Ordered list of payloads found in the IKEv2 packet
    pub payloads: Vec<Payload>,
}

/// Generic payload of an IKE message including its types
///
/// See [PayloadType] for the type definitions, all types listed there
/// but not implemented here are simply not supported
pub enum Payload {
    SecurityAssociation(SecurityAssociation),
    KeyExchange(KeyExchange),

    /// Container for random data used to guarantee liveness during an
    /// exchange and protect against replay attacks. The size of the Nonce Data
    /// MUST be between 16 and 256 octets, inclusive. Nonce values MUST NOT be reused.
    Nonce(Vec<u8>),
    Notify(Notification),
    Delete(Deletion),

    /// Vendor-defined constant value that allow clients to discover peers
    /// with vendor-specific functionality in the private-use areas of various
    /// types in the document and enable vendor-specific extensions.
    ///
    /// Multiple VendorID payloads may be present in a single IKEv2 message.
    /// It is the responsibility of the person choosing the Vendor ID to assure
    /// its uniqueness in spite of the absence of any central registry for IDs.
    VendorID(Vec<u8>),
    EncryptedAndAuthenticated(Vec<u8>),
}

/// High-level representation of a Security Association
///
/// See its [build] and [parse] methods and associated functions, respectively.
///
/// A Security Association MAY contain multiple proposals. If there is
/// more than one, they MUST be ordered from most preferred to least
/// preferred. Each proposal contains a single IPsec protocol (where a
/// protocol is IKE, ESP, or AH), each protocol MAY contain multiple
/// transforms, and each transform MAY contain multiple attributes.
///
/// One reason to use multiple proposals is to propose both standard crypto
/// ciphers and combined-mode ciphers. Combined-mode ciphers include
/// both integrity and encryption in a single encryption algorithm, and
/// MUST either offer no integrity algorithm or a single integrity
/// algorithm of "NONE", with no integrity algorithm being the
/// RECOMMENDED method. If an initiator wants to propose both combined-mode
/// ciphers and normal ciphers, it must include two proposals: one
/// will have all the combined-mode ciphers, and the other will have all
/// the normal ciphers with the integrity algorithms.
pub struct SecurityAssociation {
    pub proposals: Vec<Proposal>,
}

/// High-level representation of a Proposal
///
/// Each Proposal/Protocol structure is followed by one or more transform
/// structures. The number of different transforms is generally
/// determined by the Protocol. IKE generally has four transforms: a
/// Diffie-Hellman group, an integrity check algorithm, a PRF algorithm,
/// and an encryption algorithm. For each Protocol, the set of
/// permissible transforms is assigned Transform ID numbers, which appear
/// in the header of each transform.
pub struct Proposal {
    /// Identifier for the security protocol to be used in this proposal,
    /// must be [SecurityProtocol::InternetKeyExchange] to work in this project
    pub protocol: SecurityProtocol,
    /// Optional sending entity's SPI (Security Parameter Index), currently not used
    /// for scanning and not needed to be duplicated from the [SecurityAssociation]
    pub spi: Vec<u8>,
    /// Ordered list of transforms in this proposal
    pub transforms: Vec<Transform>,
}

/// High-level representation of a transformation and all required additional
/// information that is dynamically built from incoming packets. See [TransformType].
pub enum Transform {
    Encryption((EncryptionAlgorithm, Option<u16>)),
    PseudoRandomFunction(PseudorandomFunction),
    Integrity(IntegrityAlgorithm),
    KeyExchange(KeyExchangeMethod),
    SequenceNumber(SequenceNumberType),
}

pub(crate) enum Attribute {
    /// Key-length in bits for variable-length encryption ciphers like AES-CBC
    KeyLength(u16),
}

// TODO
pub struct KeyExchange {
    pub dh_group: KeyExchangeMethod,
    pub data: Vec<u8>,
}

// TODO
pub struct Notification {}

// TODO
pub struct Deletion {}
